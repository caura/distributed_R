outcomes
quit
require(Defaults)
setDefaults(q, save="yes")
quit()
dim(outcomes)
plot(outcomes$percent_bad, main="Bad Rate")
outcomes)
outcomes
numeric_cols <- sapply(df, is.numeric)
df.lng <- melt(df[,numeric_cols], id="is_bad")
library.install(melt)
install.packages("melt"
)
84
df.term <- subset(df, year_issued < 2012)
df.term$home_ownership <- factor(df.term$home_ownership)
df.term$is_rent <- df.term$home_ownership=="RENT"
df.term$fico_range <- factor(df.term$fico_range)
df.term$fico_ordered <- as.numeric(df.term$fico_range)
dim(df.term)
head(df.term$fico_ordered)
dim(df.term)
names(df.term)
unique(df.term$year_issued)
df.term <- subset(df, year_issued < 2013)
df.term$home_ownership <- factor(df.term$home_ownership)
df.term$is_rent <- df.term$home_ownership=="RENT"
df.term$fico_range <- factor(df.term$fico_range)
df.term$fico_ordered <- as.numeric(df.term$fico_range)
df.term$fico_range <- factor(df.term$fico_range)
head(df.term$fico_range)
df.term$fico_range <- factor(df.term$fico_range_low)
df.term$fico_ordered <- as.numeric(df.term$fico_range)
idx <- runif(nrow(df.term)) > 0.75
train <- df.term[idx==FALSE,]
test <- df.term[idx==TRUE,]
rf <- randomForest(factor(is_bad) ~ last_fico_range_high + last_fico_range_low +
                     pub_rec_bankruptcies + revol_util + inq_last_6mths + is_rent,
                   type="classification", data=train, importance=TRUE, na.action=na.omit)
install.packages("randomForest")
rf <- randomForest(factor(is_bad) ~ last_fico_range_high + last_fico_range_low +
                     pub_rec_bankruptcies + revol_util + inq_last_6mths + is_rent,
                   type="classification", data=train, importance=TRUE, na.action=na.omit)
library(randomForest)
rf <- randomForest(factor(is_bad) ~ last_fico_range_high + last_fico_range_low +
                     pub_rec_bankruptcies + revol_util + inq_last_6mths + is_rent,
                   type="classification", data=train, importance=TRUE, na.action=na.omit)
dim(rf)
rf
dim(train)
names(train)
head(train$last_fico_range_high)
head(train$pub_rec_bankruptcies)
head(train$revol_util)
head(train$inq_last_6mths)
head(train$is_rent)
rf
head(factor(is_bed))
head(factor(is_bad))
head(factor(train$is_bad))
print(rf)
predict (rf,test)
my_predit <- predict(rf,test)
head my_predit
head(my_predit)
dim(my_predit)
head(my_predit)
dim(my_predit)
summary(my_predit)
summary(test)
summary(my_predit)
summary(test$is_bad)
head(test$is_bad)
head(my_predit)
now(test$is_bad)
nrow(test$is_bad)
test$is_bad[0]
test$is_bad[1]
test$is_bad[2]
test$is_bad[3]
test$is_bad[4]
test$is_bad[5]
test$is_bad[6]
test$is_bad[7]
test$is_bad[17]
test$is_bad[27]
test$is_bad[37]
length(test$is_bad)
head(my_predit)
head(my_predit[,2])
head(my_predit[2])
head(my_predit[1])
head(my_predit[,1])
head(my_predit[,2])
my_predit[,2]
my_predit[,1]
my_predit[1,1]
my_predit[2,1]
my_predit[2]
my_predit[2,0]
my_predit[2,,1]
my_predit[2,1]
my_prediction  <- predict (rf,test,type="prob");
predit <- my_prediction[,2];
head(predit)
head(my_prediction)
install.packages(tree)
install.packages("tree")
tr <- tree(rf ~ ., data=test)
library(tree)
tr <- tree(rf ~ ., data=test)
rf
tr <- tree(factor(is_bad) ~ last_fico_range_high +      last_fico_range_low + pub_rec_bankruptcies + revol_util +      inq_last_6mths + is_rent, data=rf)
getTree(rf, 1, labelVar=TRUE)
tree <- getTree(rf, 1, labelVar=TRUE)
head(tree)
summary(rf)
savehistory(file = "prior_to_glm.Rhistory")
quit()
head(mylogit)
mylogit
mylogit <- glm(factor(is_bad) ~ last_fico_range_high + last_fico_range_low +
pub_rec_bankruptcies + revol_util + inq_last_6mths + is_rent, data = train, family = "binomial", na.action=na.omit)
mylogit
quit()
summary(data)
head(data)
library(distributedR)
distributedR_start()
savehistory(file = ".Rhistory")
df <- dframe(c(333163,100),c(200000,100))
library(distributedR)
distributedR_start()
df <- dframe(c(333163,100),c(200000,100))
getpartition(df)
npartitions(df)
dc<-dframe(npartitions=c(2,1))
dim(dc)
dc<-dframe(npartitions=c(2,100))
dc<-dframe(npartitions=c(100,2))
dc<-dframe(npartitions=c(2,1))
ls()
data <- sqlQuery(connect, "SELECT * FROM loan_stats AS loans")
library(vRODBC)
ls()
rm(loadedData)
data <- 
data <- sqlQuery(connect, "SELECT * FROM loan_stats AS loans")
library(vRODBC)
connect <- odbcConnect("Vertica")
data <- sqlQuery(connect, "SELECT * FROM loan_stats AS loans")
foreach(i, 1:npartitions(dc), initArrays<-function(y=splits(dc,i), index=i) {
     y<-data.frame(matrix(index, nrow=index,ncol=5))
     update(y)
})
cat("value of 2nd partition is: \n")
dim(getpartition(dc,1))
dim(dc)
dim(getpartition(dc,2))
dim(getpartition(dc,1))
dim(getpartition(dc,3))
dim(getpartition(dc,1))
dc
dimnames(df)[[2]]
dimnames(df)[[1]]
dimnames(dc)[[1]]
dimnames(dc)[[2]]
df <- dframe(c(2,2),c(2,2))
data_path<-system.file("extdata",package="distributedR")
file_path <- paste(data_path,"/temp",sep="")
##Populate distributed data frame
foreach(i, 1:npartitions(df), function(sf=splits(df,i),ii=i,path=file_path){
  sf<-read.table(paste(path,ii,sep=""))
  update(sf)
})
library(distributeR)
library(distributedR)
data_path<-system.file("extdata",package="distributedR")
file_path <- paste(data_path,"/home/looker/temp",sep="")
foreach(i, 1:npartitions(df), function(sf=splits(df,i),ii=i,path=file_path){
  sf<-read.table(paste(path,ii,sep=""))
  update(sf)
})
npartitions(df)
getpartition(df)
getpartition(df[1])
sf <- read.table(paste(file_path,1,sep=""))
file_path
file_path <- paste(data_path,"/home/looker/temp",sep="")
sf <- read.table(paste(file_path,1,sep=""))
file_path
file_path <- "/home/looker/temp"
sf <- read.table(paste(file_path,1,sep=""))
sf
sf <- read.table(paste(file_path,2,sep=""))
sf
foreach(i, 1:npartitions(df), function(sf=splits(df,i),ii=i,path=file_path){
  sf<-read.table(paste(path,ii,sep=""))
  update(sf)
})
dim(getpartition(dc,1))
dim(getpartition(dc,2))
dc
getpartition(dc,2)
getpartition(dc,1)
sf
dim(getpartition(df,2))
dim(getpartition(df,1))
dim(getpartition(df,0))
splits(df,i)
i
foreach(i, 1:npartitions(df), function(sf=splits(df,i),ii=i,path=file_path){
  sf<-read.table(paste(path,ii,sep=""))
  update(sf)
})
getpartition(dc,2)
getpartition(df,2)
getpartition(df,1)
getpartition(df)
getpartition(df,2)
getpartition(df,3)
sf
df <- dframe(c(4,2),c(2,2))
foreach(i, 1:npartitions(df), function(sf=splits(df,i),ii=i,path=file_path){
  sf<-read.table(paste(path,ii,sep=""))
  update(sf)
})
getpartition(df,2)
getpartition(df,1)
getpartition(df)
df <- dframe(c(333163,100),c(200000,100))
foreach(i, 1:npartitions(df), function(sf=splits(df,i),ii=i){
limit <- 200000*ii
  sf<-data.frame(sqlQuery(connect, paste("SELECT * FROM loan_stats AS loans LIMIT",limit,sep=" ")))
  update(sf)
})
data <- sqlQuery(connect, "SELECT * FROM loan_stats AS loans")
dc<-dframe(npartitions=c(2,1))
foreach(i, 1:npartitions(dc), initArrays<-function(y=splits(dc,i), index=i) {
     y<-data.frame(matrix(index, nrow=index,ncol=5))
     update(y)
})
getpartition(dc,2)
getpartition(dc,1)
foreach(i, 1:npartitions(dc), initArrays<-function(y=splits(dc,i), index=i) {
     y<-data.frame(matrix(data, nrow=200000,ncol=100))
})
matrix(data, nrow=10,ncol=100)
matrix(data, nrow=10,ncol=1)
v <- c(3, 24)
v
v[1]
v[3]
v[200]
data[1,]
data[1,2]
data[1,1]
data[0,1]
data[0,2]
data[0,3]
data[1,3]
dim(data[1,])
dim(data[1,c(1,10)])
dim(data[c(1,10),])
dim(data[c(1,10),])
dim(data[c(2,10),])
dim(data[c(1,5),])
dim(data[c(1:10),])
dim(data[1:10,])
dim(data[1:10,1:20])
line <- 7
dim(data[line:10,1:20])
dim(data[0:10,1:20])
foreach(i, 1:npartitions(df), function(sf=splits(df,i),ii=i){
  sf<-data.frame(data[ii:(ii+199000),])
  update(sf)
})
ii
dim(data.frame(data[1:(1+199000),]))
foreach(i, 1:npartitions(df), function(sf=splits(df,i),ii=i){
  sf<-data.frame(matrix(data[ii:(200000 - ii),],nrow=200000,ncol=100))
  update(sf)
})
foreach(i, 1:npartitions(df), function(sf=splits(df,i),ii=i){
  sf<-data.frame(matrix(ii,nrow=200000,ncol=100))
  update(sf)
})
df <- dframe(c(333163,100),c(200000,100))
foreach(i, 1:npartitions(df), function(sf=splits(df,i),ii=i){
  sf<-data.frame(matrix(ii,nrow=200000,ncol=100))
  update(sf)
})
foreach(i, 1:npartitions(dc), initArrays<-function(y=splits(dc,i), index=i) {
     sf<-data.frame(matrix(index,nrow=200000,ncol=100))
   update(sf)
})
foreach(i, 1:npartitions(df), initArrays<-function(y=splits(df,i), index=i) {
     sf<-data.frame(matrix(index,nrow=200000,ncol=100))
   update(sf)
})
foreach(i, 1:npartitions(df), initArrays<-function(sf=splits(df,i), index=i) {
     sf<-data.frame(matrix(index,nrow=200000,ncol=100))
   update(sf)
})
foreach(i, 1:npartitions(df), initArrays<-function(sf=splits(df,i), index=i) {
     sf<-data.frame(matrix(index,nrow=index,ncol=100))
   update(sf)
})
dc<-dframe(npartitions=c(2,100))
dc<-dframe(npartitions=c(100,2))
dc<-dframe(npartitions=c(2,1))
foreach(i, 1:npartitions(df), initArrays<-function(sf=splits(df,i), index=i) {
     sf<-data.frame(matrix(index,index,ncol=100))
   update(sf)
})
foreach(i, 1:npartitions(df), initArrays<-function(sf=splits(df,i), index=i) {
     sf<-data.frame(matrix(index,nrow=index,ncol=100))
   update(sf)
})
foreach(i, 1:npartitions(dc), initArrays<-function(y=splits(dc,i), index=i) {
     y<-data.frame(matrix(index, nrow=index,ncol=100))
     update(y)
})
getpartition(dc,1)
getpartition(dc,2)
getpartition(dc,3)
foreach(i, 1:npartitions(dc), initArrays<-function(y=splits(dc,i), index=i) {
     y<-data.frame(matrix(data, nrow=index,ncol=100))
     update(y)
})
foreach(i, 1:npartitions(dc), initArrays<-function(y=splits(dc,i), index=i) {
     y<-data.frame(data[(index-(index-1)+(index-1)*200000):(200000*(2-index)+133163*(i-1)),])
     update(y)
})
foreach(i, 1:npartitions(dc), initArrays<-function(y=splits(dc,i), index=i) {
     y<-data.frame(data[(index-(index-1)+(index-1)*200000):(200000*(2-index)+133163*(index-1)),])
     update(y)
})
quit
rm data
rm(datA)
rm(data)
dc<-dframe(npartitions=c(2,1))
foreach(i, 1:npartitions(dc), initArrays<-function(y=splits(dc,i), index=i) {
     y<-data.frame(matrix(index, nrow=100,ncol=5))
     update(y)
})
getpartition(dc,1)
getpartition(dc,2)
data <- sqlQuery(connect,"SELECT * FROM loan_stats AS loans LIMIT 200")
data
dc<-dframe(npartitions=c(2,1))
foreach(i, 1:npartitions(dc), initArrays<-function(y=splits(dc,i), index=i) {
     y<-data.frame(data)
     update(y)
})
class(data)
data.frame(data)
dc<-dframe(npartitions=c(2,1))
foreach(i, 1:npartitions(dc), initArrays<-function(y=splits(dc,i), index=i) {
     y<-data
     update(y)
})
data_store <- data
dim(data_store)
dc<-dframe(npartitions=c(2,1))
foreach(i, 1:npartitions(dc), initArrays<-function(y=splits(dc,i), index=i) {
     y<-data_store
     update(y)
})
dim(data_store)
quit()
library(vRODBC)
dummy_query <- sqlQuery(connect,"SELECT * FROM loan_stats AS loans LIMIT 1")
connect <- odbcConnect("Vertica")
dummy_query <- sqlQuery(connect,"SELECT * FROM loan_stats AS loans LIMIT 1")
names(dummy_query)
field_names <- names(dummy_query)
field_names
fake_names <- list("mltvspline1", "mltvspline2","agespline1", "agespline2", "hpichgspline", "ficospline")
fake_names
distributedR_start()
library(distributedR)
distributedR_start()
data <- db2dframe("loan_stats", "Vertica", field_names,npartitions=c(2,1))
data <- db2dframe("loan_stats", "Vertica", field_names)
loadedSamples <- db2dframe ("mortgage", "VerticaDSN", list("def" , "mltvspline1", 
"mltvspline2" , "agespline1" , "agespline2" , "hpichgspline" , "ficospline" )) 
help(db2dframe)
library(HPdata)
data <- db2dframe("loan_stats", "Vertica", field_names,npartitions=c(2,1))
data <- db2dframe("loan_stats", "Vertica", field_names)
test_data <- db2dframe("loan_stats", "Vertica", list("id","member_id")) 
test_data <- db2dframe("loan_stats", "Vertica", list("id","member_id"),npartitions=c(2,1)) 
test_data <- db2dframe("loan_stats", "Vertica", list("id","member_id"),npartitions=c(2,1)) 
loadedSamples <- db2dframe ("mortgage", "VerticaDSN", list("def" , "mltvspline1", 
"def"))
foreach(i, 1:npartitions(dc), initArrays<-function(y=splits(dc,i), index=i) {
library(distributedR)
library(vRODBC)
y<-sqlQuery(connect, "SELECT * FROM loan_stats AS loans LIMIT 1")
  update(y)
})  update(y)
})  update(y)
distributedR_shutdown()
exit
quit()
library(distributedR)
distributedR_start()
dc<-dframe(npartitions=c(2,1))
foreach(i, 1:npartitions(dc), initArrays<-function(y=splits(dc,i), index=i) {
library(vRODBC)
connect <- odbcConnect("Vertica")
  limit <- 10
  y<-sqlQuery(connect, paste("SELECT * FROM loan_stats AS loans LIMIT",limit,sep=" "))
  update(y)
})
dim(dc)
poor_coverage <- sapply(dc, function(x) {
  coverage <- 1 - sum(is.na(x)) / length(x)
  coverage < 0.8
})
getpartition(dc)
poor_coverage <- sapply(getpartition(dc), function(x) {
  coverage <- 1 - sum(is.na(x)) / length(x)
  coverage < 0.8
})
poor_coverage
dim(getpartition(dc))
npartitions(dc)
partitionsize(dc,1)
partitionsize(dc)
library(HPdata)
library(vRODBC)
loadedData <- sqlQuery(connect, "SELECT * FROM loan_stats AS loans LIMIT 1")
loadedSamples <- db2dframe ("loan_stats", "Vertica", names(loadedData))
loadedData <- sqlQuery(connect, "SELECT * FROM loan_stats AS loans LIMIT 1")
connect <- odbcConnect("Vertica")
loadedData <- sqlQuery(connect, "SELECT * FROM loan_stats AS loans LIMIT 1")
loadedSamples <- db2dframe ("loan_stats", "Vertica", names(loadedData))
dc[,'mths_since_last_record']
getpartition(dc)
dc[,'mths_since_last_record']
getparition(dc,1)[,'mths_since_last_record'] <- NULL
getpartition(dc,1)[,'mths_since_last_record'] <- NULL
dim(getpartition(dc,1))
df <- getpartition(dc,1)
df[,'mths_since_last_record'] <- NULL
getpartition(dc,1)[,'dfdf']
getpartition(dc,1)[,'mths_since_last_record']
df[,'mths_since_last_record']
df
df[,'num_op_rev_tl']
df[,'mths_since_last_record']
getpartition(dc,1)[,'mths_since_last_record']
help(hpdglm)
library(HPdregression)
help(hpdglm)
foreach(i, 1:npartitions(dc), initArrays<-function(df=splits(dc,i), index=i) {
  df[,'mths_since_last_record'] <- NULL
  poor_coverage <- sapply(df, function(x) {
    coverage <- 1 - sum(is.na(x)) / length(x)
    coverage < 0.8
  })
  df <- df[,poor_coverage==FALSE]
  bad_indicators <- c("Late (16-30 days)", "Late (31-120 days)", "Default", "Charged Off")
  unique(df$loan_status)
  df$is_bad <- ifelse(df$loan_status %in% bad_indicators, 1,
                         ifelse(df$loan_status=="", NA,
                                  0))
  unique(df$is_bad)
  update(df)
})
foreach(i, 1:npartitions(dc), initArrays<-function(df=splits(dc,i), index=i) {
  poor_coverage <- sapply(df, function(x) {
    coverage <- 1 - sum(is.na(x)) / length(x)
    coverage < 0.8
  })
  df <- df[,poor_coverage==FALSE]
  bad_indicators <- c("Late (16-30 days)", "Late (31-120 days)", "Default", "Charged Off")
  unique(df$loan_status)
  df$is_bad <- ifelse(df$loan_status %in% bad_indicators, 1,
                         ifelse(df$loan_status=="", NA,
                                  0))
  unique(df$is_bad)
  update(df)
})
foreach(i, 1:npartitions(dc), initArrays<-function(df=splits(dc,i), index=i) {
  poor_coverage <- sapply(df, function(x) {
    coverage <- 1 - sum(is.na(x)) / length(x)
    coverage < 0.8
  })
  #df <- df[,poor_coverage==FALSE]
  bad_indicators <- c("Late (16-30 days)", "Late (31-120 days)", "Default", "Charged Off")
  unique(df$loan_status)
  df$is_bad <- ifelse(df$loan_status %in% bad_indicators, 1,
                         ifelse(df$loan_status=="", NA,
                                  0))
  unique(df$is_bad)
  update(df)
})
dc <- dframe(c(333163,110),c(200000,110))
foreach(i, 1:npartitions(dc), initArrays<-function(y=splits(dc,i), index=i) {
  library(vRODBC)
  connect <- odbcConnect("Vertica")
  limit <- 10
  y<-sqlQuery(connect, paste("SELECT * FROM loan_stats AS loans LIMIT",limit,sep=" "))
  update(y)
})
history
savehistory(file = "2nd.Rhistory")
